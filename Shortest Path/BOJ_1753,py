# BOJ 1753
# Author: Gu Lee
# Date: 2022.08.19
# Source: https://www.acmicpc.net/problem/1753

import sys
import heapq
input = sys.stdin.readline
INF = int(1e9)

def dijkstra(start):
    queue = []
    distance[start] = 0
    heapq.heappush(queue, (0, start))

    while queue:
        dist, node = heapq.heappop(queue)

        if distance[node] < dist:
            continue

        for (cost, next_node) in graph[node]:
            new_cost = dist + cost
            if new_cost < distance[next_node]:
                distance[next_node] = new_cost
                heapq.heappush(queue, (new_cost, next_node))     


if __name__=="__main__":
    v, e = map(int, input().split())
    start = int(input())
    distance = [INF] * (v+1)
    graph = [[]*(v+1) for _ in range(v+1)]
    
    for i in range(e):
        a, b, c = map(int, input().split())
        graph[a].append((c,b))

    dijkstra(start)

    for i, val in enumerate(distance):
        if i >= 1:
            if val == INF:
                print("INF")
            else:
                print(val)
